col_types = cols(Gender = col_factor(levels = c("1",
"0")), Own_car = col_factor(levels = c("1",
"0")), Own_property = col_factor(levels = c("1",
"0")), Work_phone = col_factor(levels = c("1",
"0")), Phone = col_factor(levels = c("1",
"0")), Email = col_factor(levels = c("1",
"0")), Unemployed = col_factor(levels = c("1",
"0")), Num_children = col_integer(),
Num_family = col_integer(), Account_length = col_integer(),
Total_income = col_double(), Income_type = col_factor(levels = c("Working",
"Commercial associate", "Pensioner",
"State servant", "Student")),
Education_type = col_factor(levels = c("Secondary / secondary special",
"Higher education", "Incomplete higher",
"Lower secondary", "Academic degree")),
Family_status = col_factor(levels = c("Married",
"Single / not married", "Civil marriage",
"Separated", "Widow")), Housing_type = col_factor(levels = c("House / apartment",
"With parents", "Municipal apartment",
"Rented apartment", "Office apartment")),
Occupation_type = col_character(),
Target = col_factor(levels = c("1",
"0"))))
dataset <- dataset %>% select(-ID)
dataset$Occupation_type <- as.factor(dataset$Occupation_type)
dataset$Housing_type <- as.factor(dataset$Housing_type)
summary(dataset)
na_counts <- colSums(is.na(dataset))
print(na_counts)
totalFaltantes<-sum(is.na(dataset))
numero_de_filas <- nrow(dataset)
porcentaje_faltantes <- (totalFaltantes / numero_de_filas) * 100
porcentaje_faltantes
dataset <- na.omit(dataset)
na_counts <- colSums(is.na(dataset))
print(na_counts)
boxplot(dataset$Num_children, main = "Numero de hijos", ylab = "Valores", col = "blue")
boxplot(dataset$Num_family, main = "Numero de familiares", ylab = "Valores", col = "red")
boxplot(dataset$Account_length, main = "Duracion cuenta", ylab = "Valores", col = "green")
boxplot(dataset$Total_income, main = "Ingresos", ylab = "Valores", col = "orange")
boxplot(dataset$Age, main = "Edad", ylab = "Valores", col = "purple")
boxplot(dataset$Years_employed, main = "Años trabajando", ylab = "Valores", col = "yellow")
remove_outliers <- function(data, column_name) {
require(dplyr)
bounds <- data %>%
summarise(
upper_bound = quantile(.data[[column_name]], 0.99) + 1.5 * IQR(.data[[column_name]])
)
filtered_data <- data %>%
filter(.data[[column_name]] < bounds$upper_bound)
return(filtered_data)
}
# Calcular percentiles para la variable 'Total_income'
dataset <- remove_outliers(dataset,"Years_employed")
dataset <- remove_outliers(dataset,"Num_children")
dataset <- remove_outliers(dataset,"Num_family")
dataset <- remove_outliers(dataset,"Total_income")
boxplot(dataset$Num_children, main = "Numero de hijos", ylab = "Valores", col = "blue")
boxplot(dataset$Num_family, main = "Numero de familiares", ylab = "Valores", col = "red")
boxplot(dataset$Total_income, main = "Ingresos", ylab = "Valores", col = "orange")
boxplot(dataset$Years_employed, main = "Años trabajando", ylab = "Valores", col = "yellow")
analyze_data <- function(df) {
cat("Análisis para Variables Numéricas:\n")
print(summary(df[sapply(df, is.numeric)]))
print("Desviación estandar")
print(sapply(df[sapply(df, is.numeric)], sd))
}
# Ejecutar la función de análisis
analyze_data(dataset)
analyze_categorical <- function(df) {
cat_columns <- sapply(df, is.factor)  # Encuentra columnas categóricas
results <- lapply(names(df)[cat_columns], function(col) {
cat(sprintf("\nAnálisis de la columna: %s\n", col))
frecuencias <- table(df[[col]])
proporciones <- prop.table(frecuencias) * 100
print("Conteos")
print(frecuencias)
print(proporciones)
df_frecuencias <- as.data.frame(frecuencias)
p <- ggplot(df_frecuencias, aes_string(x = "Var1", y = "Freq", fill = "Var1")) +
geom_bar(stat = "identity") +
labs(title = sprintf("Distribución de %s", col), x = col, y = "Frecuencia") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
})
}
analyze_categorical(dataset)
# hipotesis1
data_corr <- dataset[, sapply(dataset, is.numeric)]
cor_matrix <- cor(data_corr, use = "complete.obs")
corrplot(cor_matrix, method = "color", addCoef.col = "black", tl.col = "black", tl.srt = 45, cl.lim = c(-1, 1))
# hipotesis2
library(FactoMineR)
library(factoextra)
library(reshape2)
result_pca <- PCA(dataset[, sapply(dataset, is.numeric)], graph = FALSE)
fviz_pca_biplot(result_pca, label="var", habillage=dataset$Target,
addEllipses=TRUE, ellipse.level=0.95)
table_data <- table(dataset$Education_type, dataset$Housing_type)
fviz_pca_var(result_pca, col.var="steelblue")+
theme_minimal()
fviz_pca_var(result_pca, col.var="contrib")+
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=96) +
theme_minimal()
# hipotesis3
library(GGally)
ggpairs(dataset, columns = c("Age", "Total_income", "Years_employed","Num_children","Account_length","Num_family"),
aes(color = Target),upper = list(continuous = "points"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(dplyr)
library(tidyr)
library(ggplot2)
library(reshape2)
library(corrplot)
library(readr)
dataset <- read_csv("C:/Users/pablo/Desktop/Analisis/analisisExploratorio/dataset.csv",
col_types = cols(Gender = col_factor(levels = c("1",
"0")), Own_car = col_factor(levels = c("1",
"0")), Own_property = col_factor(levels = c("1",
"0")), Work_phone = col_factor(levels = c("1",
"0")), Phone = col_factor(levels = c("1",
"0")), Email = col_factor(levels = c("1",
"0")), Unemployed = col_factor(levels = c("1",
"0")), Num_children = col_integer(),
Num_family = col_integer(), Account_length = col_integer(),
Total_income = col_double(), Income_type = col_factor(levels = c("Working",
"Commercial associate", "Pensioner",
"State servant", "Student")),
Education_type = col_factor(levels = c("Secondary / secondary special",
"Higher education", "Incomplete higher",
"Lower secondary", "Academic degree")),
Family_status = col_factor(levels = c("Married",
"Single / not married", "Civil marriage",
"Separated", "Widow")), Housing_type = col_factor(levels = c("House / apartment",
"With parents", "Municipal apartment",
"Rented apartment", "Office apartment")),
Occupation_type = col_character(),
Target = col_factor(levels = c("1",
"0"))))
dataset <- dataset %>% select(-ID)
dataset$Occupation_type <- as.factor(dataset$Occupation_type)
dataset$Housing_type <- as.factor(dataset$Housing_type)
summary(dataset)
na_counts <- colSums(is.na(dataset))
print(na_counts)
totalFaltantes<-sum(is.na(dataset))
numero_de_filas <- nrow(dataset)
porcentaje_faltantes <- (totalFaltantes / numero_de_filas) * 100
porcentaje_faltantes
dataset <- na.omit(dataset)
na_counts <- colSums(is.na(dataset))
print(na_counts)
boxplot(dataset$Num_children, main = "Numero de hijos", ylab = "Valores", col = "blue")
boxplot(dataset$Num_family, main = "Numero de familiares", ylab = "Valores", col = "red")
boxplot(dataset$Account_length, main = "Duracion cuenta", ylab = "Valores", col = "green")
boxplot(dataset$Total_income, main = "Ingresos", ylab = "Valores", col = "orange")
boxplot(dataset$Age, main = "Edad", ylab = "Valores", col = "purple")
boxplot(dataset$Years_employed, main = "Años trabajando", ylab = "Valores", col = "yellow")
remove_outliers <- function(data, column_name) {
require(dplyr)
bounds <- data %>%
summarise(
upper_bound = quantile(.data[[column_name]], 0.99) + 1.5 * IQR(.data[[column_name]])
)
filtered_data <- data %>%
filter(.data[[column_name]] <= bounds$upper_bound)
return(filtered_data)
}
# Calcular percentiles para la variable 'Total_income'
dataset <- remove_outliers(dataset,"Years_employed")
dataset <- remove_outliers(dataset,"Num_children")
dataset <- remove_outliers(dataset,"Num_family")
dataset <- remove_outliers(dataset,"Total_income")
boxplot(dataset$Num_children, main = "Numero de hijos", ylab = "Valores", col = "blue")
boxplot(dataset$Num_family, main = "Numero de familiares", ylab = "Valores", col = "red")
boxplot(dataset$Total_income, main = "Ingresos", ylab = "Valores", col = "orange")
boxplot(dataset$Years_employed, main = "Años trabajando", ylab = "Valores", col = "yellow")
analyze_data <- function(df) {
cat("Análisis para Variables Numéricas:\n")
print(summary(df[sapply(df, is.numeric)]))
print("Desviación estandar")
print(sapply(df[sapply(df, is.numeric)], sd))
}
# Ejecutar la función de análisis
analyze_data(dataset)
analyze_categorical <- function(df) {
cat_columns <- sapply(df, is.factor)  # Encuentra columnas categóricas
results <- lapply(names(df)[cat_columns], function(col) {
cat(sprintf("\nAnálisis de la columna: %s\n", col))
frecuencias <- table(df[[col]])
proporciones <- prop.table(frecuencias) * 100
print("Conteos")
print(frecuencias)
print(proporciones)
df_frecuencias <- as.data.frame(frecuencias)
p <- ggplot(df_frecuencias, aes_string(x = "Var1", y = "Freq", fill = "Var1")) +
geom_bar(stat = "identity") +
labs(title = sprintf("Distribución de %s", col), x = col, y = "Frecuencia") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
})
}
analyze_categorical(dataset)
# hipotesis1
data_corr <- dataset[, sapply(dataset, is.numeric)]
cor_matrix <- cor(data_corr, use = "complete.obs")
corrplot(cor_matrix, method = "color", addCoef.col = "black", tl.col = "black", tl.srt = 45, cl.lim = c(-1, 1))
# hipotesis2
library(FactoMineR)
library(factoextra)
library(reshape2)
result_pca <- PCA(dataset[, sapply(dataset, is.numeric)], graph = FALSE)
fviz_pca_biplot(result_pca, label="var", habillage=dataset$Target,
addEllipses=TRUE, ellipse.level=0.95)
table_data <- table(dataset$Education_type, dataset$Housing_type)
fviz_pca_var(result_pca, col.var="steelblue")+
theme_minimal()
fviz_pca_var(result_pca, col.var="contrib")+
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=96) +
theme_minimal()
# hipotesis3
library(GGally)
ggpairs(dataset, columns = c("Age", "Total_income", "Years_employed","Num_children","Account_length","Num_family"),
aes(color = Target),upper = list(continuous = "points"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# hipotesis1
data_corr <- dataset[, sapply(dataset, is.numeric)]
cor_matrix <- cor(data_corr, use = "complete.obs")
corrplot(cor_matrix, method = "color", addCoef.col = "black", tl.col = "black", tl.srt = 45, cl.lim = c(-1, 1))
ggplot(dataset, aes(x = Target, y = Total_income, fill = Estado_de_Aprobacion)) +
geom_violin() +
labs(title = "Distribución de Ingreso Total por Estado de Aprobación", x = "Estado de Aprobación", y = "Ingreso Total")
# hipotesis1
data_corr <- dataset[, sapply(dataset, is.numeric)]
cor_matrix <- cor(data_corr, use = "complete.obs")
corrplot(cor_matrix, method = "color", addCoef.col = "black", tl.col = "black", tl.srt = 45, cl.lim = c(-1, 1))
ggplot(dataset, aes(x = Target, y = Total_income, fill = Target)) +
geom_violin() +
labs(title = "Distribución de Ingreso Total por Estado de Aprobación", x = "Estado de Aprobación", y = "Ingreso Total")
# hipotesis2
library(FactoMineR)
library(factoextra)
library(reshape2)
result_pca <- PCA(dataset[, sapply(dataset, is.numeric)], graph = FALSE)
fviz_pca_biplot(result_pca, label="var", habillage=dataset$Target,
addEllipses=TRUE, ellipse.level=0.95)
table_data <- table(dataset$Education_type, dataset$Housing_type)
fviz_pca_var(result_pca, col.var="steelblue")+
theme_minimal()
fviz_pca_var(result_pca, col.var="contrib")+
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=96) +
theme_minimal()
# hipotesis3
library(GGally)
ggpairs(dataset, columns = c("Age", "Total_income", "Years_employed","Num_children","Account_length","Num_family"),
aes(color = Target),upper = list(continuous = "points"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# hipotesis1
numerics <- sapply(dataset, is.numeric)
data_corr <- dataset[, numerics]
# Calcular matriz de correlación
cor_matrix <- cor(data_corr, use = "complete.obs")
# Graficar el mapa de calor de correlaciones
corrplot(cor_matrix, method = "color")
# hipotesis2
library(FactoMineR)
library(factoextra)
library(reshape2)
result_pca <- PCA(dataset[, sapply(dataset, is.numeric)], graph = FALSE)
fviz_pca_biplot(result_pca, label="var", habillage=dataset$Target,
addEllipses=TRUE, ellipse.level=0.95)
table_data <- table(dataset$Education_type, dataset$Housing_type)
fviz_pca_var(result_pca, col.var="steelblue")+
theme_minimal()
fviz_pca_var(result_pca, col.var="contrib")+
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=96) +
theme_minimal()
# hipotesis3
library(GGally)
ggpairs(dataset, columns = c("Age", "Total_income", "Years_employed","Num_children","Account_length","Num_family"),
aes(color = Target),upper = list(continuous = "points"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(dplyr)
library(tidyr)
library(ggplot2)
library(reshape2)
library(corrplot)
library(FactoMineR)
library(factoextra)
library(GGally)
library(readr)
dataset <- read_csv("C:/Users/pablo/Desktop/Analisis/analisisExploratorio/dataset.csv",
col_types = cols(Gender = col_factor(levels = c("1",
"0")), Own_car = col_factor(levels = c("1",
"0")), Own_property = col_factor(levels = c("1",
"0")), Work_phone = col_factor(levels = c("1",
"0")), Phone = col_factor(levels = c("1",
"0")), Email = col_factor(levels = c("1",
"0")), Unemployed = col_factor(levels = c("1",
"0")), Num_children = col_integer(),
Num_family = col_integer(), Account_length = col_integer(),
Total_income = col_double(), Income_type = col_factor(levels = c("Working",
"Commercial associate", "Pensioner",
"State servant", "Student")),
Education_type = col_factor(levels = c("Secondary / secondary special",
"Higher education", "Incomplete higher",
"Lower secondary", "Academic degree")),
Family_status = col_factor(levels = c("Married",
"Single / not married", "Civil marriage",
"Separated", "Widow")), Housing_type = col_factor(levels = c("House / apartment",
"With parents", "Municipal apartment",
"Rented apartment", "Office apartment")),
Occupation_type = col_character(),
Target = col_factor(levels = c("1",
"0"))))
dataset <- dataset %>% select(-ID)
dataset$Occupation_type <- as.factor(dataset$Occupation_type)
dataset$Housing_type <- as.factor(dataset$Housing_type)
summary(dataset)
na_counts <- colSums(is.na(dataset))
print(na_counts)
totalFaltantes<-sum(is.na(dataset))
numero_de_filas <- nrow(dataset)
porcentaje_faltantes <- (totalFaltantes / numero_de_filas) * 100
porcentaje_faltantes
dataset <- na.omit(dataset)
na_counts <- colSums(is.na(dataset))
print(na_counts)
boxplot(dataset$Num_children, main = "Numero de hijos", ylab = "Valores", col = "blue")
boxplot(dataset$Num_family, main = "Numero de familiares", ylab = "Valores", col = "red")
boxplot(dataset$Account_length, main = "Duracion cuenta", ylab = "Valores", col = "green")
boxplot(dataset$Total_income, main = "Ingresos", ylab = "Valores", col = "orange")
boxplot(dataset$Age, main = "Edad", ylab = "Valores", col = "purple")
boxplot(dataset$Years_employed, main = "Años trabajando", ylab = "Valores", col = "yellow")
remove_outliers <- function(data, column_name) {
require(dplyr)
bounds <- data %>%
summarise(
upper_bound = quantile(.data[[column_name]], 0.99) + 1.5 * IQR(.data[[column_name]])
)
filtered_data <- data %>%
filter(.data[[column_name]] <= bounds$upper_bound)
return(filtered_data)
}
# Calcular percentiles para la variable 'Total_income'
dataset <- remove_outliers(dataset,"Years_employed")
dataset <- remove_outliers(dataset,"Num_children")
dataset <- remove_outliers(dataset,"Num_family")
dataset <- remove_outliers(dataset,"Total_income")
boxplot(dataset$Num_children, main = "Numero de hijos", ylab = "Valores", col = "blue")
boxplot(dataset$Num_family, main = "Numero de familiares", ylab = "Valores", col = "red")
boxplot(dataset$Total_income, main = "Ingresos", ylab = "Valores", col = "orange")
boxplot(dataset$Years_employed, main = "Años trabajando", ylab = "Valores", col = "yellow")
analyze_data <- function(df) {
cat("Análisis para Variables Numéricas:\n")
print(summary(df[sapply(df, is.numeric)]))
print("Desviación estandar")
print(sapply(df[sapply(df, is.numeric)], sd))
}
# Ejecutar la función de análisis
analyze_data(dataset)
analyze_categorical <- function(df) {
cat_columns <- sapply(df, is.factor)  # Encuentra columnas categóricas
results <- lapply(names(df)[cat_columns], function(col) {
cat(sprintf("\nAnálisis de la columna: %s\n", col))
frecuencias <- table(df[[col]])
proporciones <- prop.table(frecuencias) * 100
print("Conteos")
print(frecuencias)
print(proporciones)
df_frecuencias <- as.data.frame(frecuencias)
p <- ggplot(df_frecuencias, aes_string(x = "Var1", y = "Freq", fill = "Var1")) +
geom_bar(stat = "identity") +
labs(title = sprintf("Distribución de %s", col), x = col, y = "Frecuencia") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
})
}
analyze_categorical(dataset)
numerics <- sapply(dataset, is.numeric)
data_corr <- dataset[, numerics]
# Calcular matriz de correlación
cor_matrix <- cor(data_corr, use = "complete.obs")
# Graficar el mapa de calor de correlaciones
corrplot(cor_matrix, method = "color")
result_pca <- PCA(dataset[, sapply(dataset, is.numeric)], graph = FALSE)
fviz_pca_biplot(result_pca, label="var", habillage=dataset$Target,
addEllipses=TRUE, ellipse.level=0.95)
table_data <- table(dataset$Education_type, dataset$Housing_type)
fviz_pca_var(result_pca, col.var="steelblue")+
theme_minimal()
fviz_pca_var(result_pca, col.var="contrib")+
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=96) +
theme_minimal()
ggpairs(dataset, columns = c("Age", "Total_income", "Years_employed","Num_children","Account_length","Num_family"),
aes(color = Target),upper = list(continuous = "points"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# hipotesis1
# hipotesis2
# hipotesis3
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(dplyr)
library(tidyr)
library(ggplot2)
library(reshape2)
library(corrplot)
library(FactoMineR)
library(factoextra)
library(GGally)
library(readr)
dataset <- read_csv("C:/Users/pablo/Desktop/Analisis/analisisExploratorio/dataset.csv",
col_types = cols(Gender = col_factor(levels = c("1",
"0")), Own_car = col_factor(levels = c("1",
"0")), Own_property = col_factor(levels = c("1",
"0")), Work_phone = col_factor(levels = c("1",
"0")), Phone = col_factor(levels = c("1",
"0")), Email = col_factor(levels = c("1",
"0")), Unemployed = col_factor(levels = c("1",
"0")), Num_children = col_integer(),
Num_family = col_integer(), Account_length = col_integer(),
Total_income = col_double(), Income_type = col_factor(levels = c("Working",
"Commercial associate", "Pensioner",
"State servant", "Student")),
Education_type = col_factor(levels = c("Secondary / secondary special",
"Higher education", "Incomplete higher",
"Lower secondary", "Academic degree")),
Family_status = col_factor(levels = c("Married",
"Single / not married", "Civil marriage",
"Separated", "Widow")), Housing_type = col_factor(levels = c("House / apartment",
"With parents", "Municipal apartment",
"Rented apartment", "Office apartment")),
Occupation_type = col_character(),
Target = col_factor(levels = c("1",
"0"))))
dataset <- dataset %>% select(-ID)
dataset$Occupation_type <- as.factor(dataset$Occupation_type)
dataset$Housing_type <- as.factor(dataset$Housing_type)
summary(dataset)
na_counts <- colSums(is.na(dataset))
print(na_counts)
totalFaltantes<-sum(is.na(dataset))
numero_de_filas <- nrow(dataset)
porcentaje_faltantes <- (totalFaltantes / numero_de_filas) * 100
porcentaje_faltantes
dataset <- na.omit(dataset)
na_counts <- colSums(is.na(dataset))
print(na_counts)
boxplot(dataset$Num_children, main = "Numero de hijos", ylab = "Valores", col = "blue")
boxplot(dataset$Num_family, main = "Numero de familiares", ylab = "Valores", col = "red")
boxplot(dataset$Account_length, main = "Duracion cuenta", ylab = "Valores", col = "green")
boxplot(dataset$Total_income, main = "Ingresos", ylab = "Valores", col = "orange")
boxplot(dataset$Age, main = "Edad", ylab = "Valores", col = "purple")
boxplot(dataset$Years_employed, main = "Años trabajando", ylab = "Valores", col = "yellow")
remove_outliers <- function(data, column_name) {
require(dplyr)
bounds <- data %>%
summarise(
upper_bound = quantile(.data[[column_name]], 0.99) + 1.5 * IQR(.data[[column_name]])
)
filtered_data <- data %>%
filter(.data[[column_name]] <= bounds$upper_bound)
return(filtered_data)
}
# Calcular percentiles para la variable 'Total_income'
dataset <- remove_outliers(dataset,"Years_employed")
dataset <- remove_outliers(dataset,"Num_children")
dataset <- remove_outliers(dataset,"Num_family")
dataset <- remove_outliers(dataset,"Total_income")
boxplot(dataset$Num_children, main = "Numero de hijos", ylab = "Valores", col = "blue")
boxplot(dataset$Num_family, main = "Numero de familiares", ylab = "Valores", col = "red")
boxplot(dataset$Total_income, main = "Ingresos", ylab = "Valores", col = "orange")
boxplot(dataset$Years_employed, main = "Años trabajando", ylab = "Valores", col = "yellow")
analyze_data <- function(df) {
cat("Análisis para Variables Numéricas:\n")
print(summary(df[sapply(df, is.numeric)]))
print("Desviación estandar")
print(sapply(df[sapply(df, is.numeric)], sd))
}
# Ejecutar la función de análisis
analyze_data(dataset)
analyze_categorical <- function(df) {
cat_columns <- sapply(df, is.factor)  # Encuentra columnas categóricas
results <- lapply(names(df)[cat_columns], function(col) {
cat(sprintf("\nAnálisis de la columna: %s\n", col))
frecuencias <- table(df[[col]])
proporciones <- prop.table(frecuencias) * 100
print("Conteos")
print(frecuencias)
print(proporciones)
df_frecuencias <- as.data.frame(frecuencias)
p <- ggplot(df_frecuencias, aes_string(x = "Var1", y = "Freq", fill = "Var1")) +
geom_bar(stat = "identity") +
labs(title = sprintf("Distribución de %s", col), x = col, y = "Frecuencia") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
})
}
analyze_categorical(dataset)
